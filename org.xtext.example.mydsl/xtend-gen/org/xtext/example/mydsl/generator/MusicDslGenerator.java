/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import musicMetamodel.Composition;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.generator.MsczxGenerator;
import org.xtext.example.mydsl.generator.MusicXMLGenerator;
import org.xtext.example.mydsl.generator.XmlGenerator;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MusicDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Composition composition = ((Composition[])Conversions.unwrapArray((Iterables.<Composition>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Composition.class)), Composition.class))[0];
    MusicXMLGenerator musicXMLGenerator = new MusicXMLGenerator(composition);
    String _name = composition.getName();
    String _plus = (_name + ".musicxml");
    fsa.generateFile(_plus, musicXMLGenerator.generateMusicXml());
    XmlGenerator xmlGenerator = new XmlGenerator(composition);
    String _name_1 = composition.getName();
    String _plus_1 = (_name_1 + ".xml");
    fsa.generateFile(_plus_1, xmlGenerator.generateXml());
    MsczxGenerator msczxGenerator = new MsczxGenerator(composition);
    String _name_2 = composition.getName();
    String _plus_2 = (_name_2 + ".mscx");
    fsa.generateFile(_plus_2, msczxGenerator.generateMsczx());
  }
}
