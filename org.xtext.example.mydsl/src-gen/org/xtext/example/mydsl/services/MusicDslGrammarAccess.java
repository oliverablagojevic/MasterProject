/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MusicDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.Composition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompositionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAuthorKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAuthorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAuthorEStringParserRuleCall_4_1_0 = (RuleCall)cAuthorAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInstrumentKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInstrumentAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInstrumentEStringParserRuleCall_5_1_0 = (RuleCall)cInstrumentAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cTonalityKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTonalityAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTonalityEStringParserRuleCall_6_1_0 = (RuleCall)cTonalityAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSoundTempoKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSoundTempoAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSoundTempoEIntParserRuleCall_7_1_0 = (RuleCall)cSoundTempoAssignment_7_1.eContents().get(0);
		private final Assignment cStaffAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStaffStaffParserRuleCall_8_0 = (RuleCall)cStaffAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cStaffAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cStaffStaffParserRuleCall_9_1_0 = (RuleCall)cStaffAssignment_9_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Composition:
		//	{Composition}
		//	'Composition' name=EString
		//	'[' ('author:' author=EString)? ('instrument:' instrument=EString)? ('tonality:' tonality=EString)? ('soundTempo:'
		//	soundTempo=EInt)?
		//	staff+=Staff ("," staff+=Staff)*
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Composition} 'Composition' name=EString '[' ('author:' author=EString)? ('instrument:' instrument=EString)?
		//('tonality:' tonality=EString)? ('soundTempo:' soundTempo=EInt)? staff+=Staff ("," staff+=Staff)* ']'
		public Group getGroup() { return cGroup; }
		
		//{Composition}
		public Action getCompositionAction_0() { return cCompositionAction_0; }
		
		//'Composition'
		public Keyword getCompositionKeyword_1() { return cCompositionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//('author:' author=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'author:'
		public Keyword getAuthorKeyword_4_0() { return cAuthorKeyword_4_0; }
		
		//author=EString
		public Assignment getAuthorAssignment_4_1() { return cAuthorAssignment_4_1; }
		
		//EString
		public RuleCall getAuthorEStringParserRuleCall_4_1_0() { return cAuthorEStringParserRuleCall_4_1_0; }
		
		//('instrument:' instrument=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'instrument:'
		public Keyword getInstrumentKeyword_5_0() { return cInstrumentKeyword_5_0; }
		
		//instrument=EString
		public Assignment getInstrumentAssignment_5_1() { return cInstrumentAssignment_5_1; }
		
		//EString
		public RuleCall getInstrumentEStringParserRuleCall_5_1_0() { return cInstrumentEStringParserRuleCall_5_1_0; }
		
		//('tonality:' tonality=EString)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'tonality:'
		public Keyword getTonalityKeyword_6_0() { return cTonalityKeyword_6_0; }
		
		//tonality=EString
		public Assignment getTonalityAssignment_6_1() { return cTonalityAssignment_6_1; }
		
		//EString
		public RuleCall getTonalityEStringParserRuleCall_6_1_0() { return cTonalityEStringParserRuleCall_6_1_0; }
		
		//('soundTempo:' soundTempo=EInt)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'soundTempo:'
		public Keyword getSoundTempoKeyword_7_0() { return cSoundTempoKeyword_7_0; }
		
		//soundTempo=EInt
		public Assignment getSoundTempoAssignment_7_1() { return cSoundTempoAssignment_7_1; }
		
		//EInt
		public RuleCall getSoundTempoEIntParserRuleCall_7_1_0() { return cSoundTempoEIntParserRuleCall_7_1_0; }
		
		//staff+=Staff
		public Assignment getStaffAssignment_8() { return cStaffAssignment_8; }
		
		//Staff
		public RuleCall getStaffStaffParserRuleCall_8_0() { return cStaffStaffParserRuleCall_8_0; }
		
		//("," staff+=Staff)*
		public Group getGroup_9() { return cGroup_9; }
		
		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//staff+=Staff
		public Assignment getStaffAssignment_9_1() { return cStaffAssignment_9_1; }
		
		//Staff
		public RuleCall getStaffStaffParserRuleCall_9_1_0() { return cStaffStaffParserRuleCall_9_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
	}
	public class StaffElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.StaffElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMeasureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepetitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNoteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//StaffElement:
		//	Measure | Rest | Repetition | Note;
		@Override public ParserRule getRule() { return rule; }
		
		//Measure | Rest | Repetition | Note
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Measure
		public RuleCall getMeasureParserRuleCall_0() { return cMeasureParserRuleCall_0; }
		
		//Rest
		public RuleCall getRestParserRuleCall_1() { return cRestParserRuleCall_1; }
		
		//Repetition
		public RuleCall getRepetitionParserRuleCall_2() { return cRepetitionParserRuleCall_2; }
		
		//Note
		public RuleCall getNoteParserRuleCall_3() { return cNoteParserRuleCall_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class StaffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.Staff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStaffAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStaffKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStaffNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStaffNumberEIntParserRuleCall_2_0 = (RuleCall)cStaffNumberAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cClefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cClefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClefClefParserRuleCall_5_0 = (RuleCall)cClefAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cKeyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cKeyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cKeyKeyParserRuleCall_6_1_0 = (RuleCall)cKeyAssignment_6_1.eContents().get(0);
		private final Keyword cTimeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTimeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTimeTimeSignatureParserRuleCall_8_0 = (RuleCall)cTimeAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cElementsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cElementsStaffElementParserRuleCall_9_0_0 = (RuleCall)cElementsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cElementsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cElementsStaffElementParserRuleCall_9_1_1_0 = (RuleCall)cElementsAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Staff:
		//	{Staff}
		//	'Staff' staffNumber=EInt
		//	'['
		//	'clef:' clef=Clef ('key:' key=Key)?
		//	'time:' time=TimeSignature (elements+=StaffElement ("," elements+=StaffElement)*)?
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Staff} 'Staff' staffNumber=EInt '[' 'clef:' clef=Clef ('key:' key=Key)? 'time:' time=TimeSignature
		//(elements+=StaffElement ("," elements+=StaffElement)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{Staff}
		public Action getStaffAction_0() { return cStaffAction_0; }
		
		//'Staff'
		public Keyword getStaffKeyword_1() { return cStaffKeyword_1; }
		
		//staffNumber=EInt
		public Assignment getStaffNumberAssignment_2() { return cStaffNumberAssignment_2; }
		
		//EInt
		public RuleCall getStaffNumberEIntParserRuleCall_2_0() { return cStaffNumberEIntParserRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//'clef:'
		public Keyword getClefKeyword_4() { return cClefKeyword_4; }
		
		//clef=Clef
		public Assignment getClefAssignment_5() { return cClefAssignment_5; }
		
		//Clef
		public RuleCall getClefClefParserRuleCall_5_0() { return cClefClefParserRuleCall_5_0; }
		
		//('key:' key=Key)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'key:'
		public Keyword getKeyKeyword_6_0() { return cKeyKeyword_6_0; }
		
		//key=Key
		public Assignment getKeyAssignment_6_1() { return cKeyAssignment_6_1; }
		
		//Key
		public RuleCall getKeyKeyParserRuleCall_6_1_0() { return cKeyKeyParserRuleCall_6_1_0; }
		
		//'time:'
		public Keyword getTimeKeyword_7() { return cTimeKeyword_7; }
		
		//time=TimeSignature
		public Assignment getTimeAssignment_8() { return cTimeAssignment_8; }
		
		//TimeSignature
		public RuleCall getTimeTimeSignatureParserRuleCall_8_0() { return cTimeTimeSignatureParserRuleCall_8_0; }
		
		//(elements+=StaffElement ("," elements+=StaffElement)*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//elements+=StaffElement
		public Assignment getElementsAssignment_9_0() { return cElementsAssignment_9_0; }
		
		//StaffElement
		public RuleCall getElementsStaffElementParserRuleCall_9_0_0() { return cElementsStaffElementParserRuleCall_9_0_0; }
		
		//("," elements+=StaffElement)*
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }
		
		//elements+=StaffElement
		public Assignment getElementsAssignment_9_1_1() { return cElementsAssignment_9_1_1; }
		
		//StaffElement
		public RuleCall getElementsStaffElementParserRuleCall_9_1_1_0() { return cElementsStaffElementParserRuleCall_9_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
	}
	public class ClefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.Clef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClefTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Clef:
		//	{Clef} type=ClefType?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Clef} type=ClefType?
		public Group getGroup() { return cGroup; }
		
		//{Clef}
		public Action getClefAction_0() { return cClefAction_0; }
		
		//type=ClefType?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ClefType
		public RuleCall getTypeClefTypeEnumRuleCall_1_0() { return cTypeClefTypeEnumRuleCall_1_0; }
	}
	public class TimeSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.TimeSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBeatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBeatEIntParserRuleCall_1_0 = (RuleCall)cBeatAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBeatTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBeatTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBeatTypeEIntParserRuleCall_4_0 = (RuleCall)cBeatTypeAssignment_4.eContents().get(0);
		
		//TimeSignature:
		//	'beat' beat=EInt ',' 'beatType' beatType=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//'beat' beat=EInt ',' 'beatType' beatType=EInt
		public Group getGroup() { return cGroup; }
		
		//'beat'
		public Keyword getBeatKeyword_0() { return cBeatKeyword_0; }
		
		//beat=EInt
		public Assignment getBeatAssignment_1() { return cBeatAssignment_1; }
		
		//EInt
		public RuleCall getBeatEIntParserRuleCall_1_0() { return cBeatEIntParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//'beatType'
		public Keyword getBeatTypeKeyword_3() { return cBeatTypeKeyword_3; }
		
		//beatType=EInt
		public Assignment getBeatTypeAssignment_4() { return cBeatTypeAssignment_4; }
		
		//EInt
		public RuleCall getBeatTypeEIntParserRuleCall_4_0() { return cBeatTypeEIntParserRuleCall_4_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.Key");
		private final Assignment cFifthsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFifthsEIntParserRuleCall_0 = (RuleCall)cFifthsAssignment.eContents().get(0);
		
		//Key:
		//	fifths=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//fifths=EInt
		public Assignment getFifthsAssignment() { return cFifthsAssignment; }
		
		//EInt
		public RuleCall getFifthsEIntParserRuleCall_0() { return cFifthsEIntParserRuleCall_0; }
	}
	public class MeasureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.Measure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMeasureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMeasureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMeasureNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureNumberEIntParserRuleCall_2_0 = (RuleCall)cMeasureNumberAssignment_2.eContents().get(0);
		private final Keyword cBeginKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRepetitionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRepetitionRepetitionParserRuleCall_4_0_0 = (RuleCall)cRepetitionAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cRepetitionAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cRepetitionRepetitionParserRuleCall_4_1_1_0 = (RuleCall)cRepetitionAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cRestAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cRestRestParserRuleCall_5_0_0 = (RuleCall)cRestAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cRestAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cRestRestParserRuleCall_5_1_1_0 = (RuleCall)cRestAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cNoteAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cNoteNoteParserRuleCall_6_0_0 = (RuleCall)cNoteAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cNoteAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cNoteNoteParserRuleCall_6_1_1_0 = (RuleCall)cNoteAssignment_6_1_1.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Measure:
		//	{Measure}
		//	'Measure' measureNumber=EInt
		//	'begin' (repetition+=Repetition ("," repetition+=Repetition)*)? (rest+=Rest ("," rest+=Rest)*)? (note+=Note (","
		//	note+=Note)*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{Measure} 'Measure' measureNumber=EInt 'begin' (repetition+=Repetition ("," repetition+=Repetition)*)? (rest+=Rest (","
		//rest+=Rest)*)? (note+=Note ("," note+=Note)*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{Measure}
		public Action getMeasureAction_0() { return cMeasureAction_0; }
		
		//'Measure'
		public Keyword getMeasureKeyword_1() { return cMeasureKeyword_1; }
		
		//measureNumber=EInt
		public Assignment getMeasureNumberAssignment_2() { return cMeasureNumberAssignment_2; }
		
		//EInt
		public RuleCall getMeasureNumberEIntParserRuleCall_2_0() { return cMeasureNumberEIntParserRuleCall_2_0; }
		
		//'begin'
		public Keyword getBeginKeyword_3() { return cBeginKeyword_3; }
		
		//(repetition+=Repetition ("," repetition+=Repetition)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//repetition+=Repetition
		public Assignment getRepetitionAssignment_4_0() { return cRepetitionAssignment_4_0; }
		
		//Repetition
		public RuleCall getRepetitionRepetitionParserRuleCall_4_0_0() { return cRepetitionRepetitionParserRuleCall_4_0_0; }
		
		//("," repetition+=Repetition)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//repetition+=Repetition
		public Assignment getRepetitionAssignment_4_1_1() { return cRepetitionAssignment_4_1_1; }
		
		//Repetition
		public RuleCall getRepetitionRepetitionParserRuleCall_4_1_1_0() { return cRepetitionRepetitionParserRuleCall_4_1_1_0; }
		
		//(rest+=Rest ("," rest+=Rest)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//rest+=Rest
		public Assignment getRestAssignment_5_0() { return cRestAssignment_5_0; }
		
		//Rest
		public RuleCall getRestRestParserRuleCall_5_0_0() { return cRestRestParserRuleCall_5_0_0; }
		
		//("," rest+=Rest)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//rest+=Rest
		public Assignment getRestAssignment_5_1_1() { return cRestAssignment_5_1_1; }
		
		//Rest
		public RuleCall getRestRestParserRuleCall_5_1_1_0() { return cRestRestParserRuleCall_5_1_1_0; }
		
		//(note+=Note ("," note+=Note)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//note+=Note
		public Assignment getNoteAssignment_6_0() { return cNoteAssignment_6_0; }
		
		//Note
		public RuleCall getNoteNoteParserRuleCall_6_0_0() { return cNoteNoteParserRuleCall_6_0_0; }
		
		//("," note+=Note)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//note+=Note
		public Assignment getNoteAssignment_6_1_1() { return cNoteAssignment_6_1_1; }
		
		//Note
		public RuleCall getNoteNoteParserRuleCall_6_1_1_0() { return cNoteNoteParserRuleCall_6_1_1_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class RestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.Rest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRestKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRestTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Rest:
		//	{Rest}
		//	'rest'
		//	type=RestType?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Rest} 'rest' type=RestType?
		public Group getGroup() { return cGroup; }
		
		//{Rest}
		public Action getRestAction_0() { return cRestAction_0; }
		
		//'rest'
		public Keyword getRestKeyword_1() { return cRestKeyword_1; }
		
		//type=RestType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//RestType
		public RuleCall getTypeRestTypeEnumRuleCall_2_0() { return cTypeRestTypeEnumRuleCall_2_0; }
	}
	public class RepetitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.Repetition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepetitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRepetitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRepetitionTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Repetition:
		//	{Repetition}
		//	'repetition'
		//	type=RepetitionType?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Repetition} 'repetition' type=RepetitionType?
		public Group getGroup() { return cGroup; }
		
		//{Repetition}
		public Action getRepetitionAction_0() { return cRepetitionAction_0; }
		
		//'repetition'
		public Keyword getRepetitionKeyword_1() { return cRepetitionKeyword_1; }
		
		//type=RepetitionType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//RepetitionType
		public RuleCall getTypeRepetitionTypeEnumRuleCall_2_0() { return cTypeRepetitionTypeEnumRuleCall_2_0; }
	}
	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNoteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNoteNameEnumRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeNoteTypeEnumRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDurationKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDurationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDurationEIntParserRuleCall_5_1_0 = (RuleCall)cDurationAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOctaveKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOctaveAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOctaveEIntParserRuleCall_6_1_0 = (RuleCall)cOctaveAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVoiceKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVoiceAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVoiceEIntParserRuleCall_7_1_0 = (RuleCall)cVoiceAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDynamicKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDynamicAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDynamicEStringParserRuleCall_8_1_0 = (RuleCall)cDynamicAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAccidentalKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cAccidentalAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cAccidentalAccidentalTypeEnumRuleCall_9_1_0 = (RuleCall)cAccidentalAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLyricsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cLyricsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cLyricsEStringParserRuleCall_10_1_0 = (RuleCall)cLyricsAssignment_10_1.eContents().get(0);
		private final Assignment cFermataAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Keyword cFermataFermataKeyword_11_0 = (Keyword)cFermataAssignment_11.eContents().get(0);
		private final Assignment cDotAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final Keyword cDotDotKeyword_12_0 = (Keyword)cDotAssignment_12.eContents().get(0);
		private final Assignment cChordAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final Keyword cChordChordKeyword_13_0 = (Keyword)cChordAssignment_13.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Assignment cNotationAssignment_14_0 = (Assignment)cGroup_14.eContents().get(0);
		private final RuleCall cNotationNotationParserRuleCall_14_0_0 = (RuleCall)cNotationAssignment_14_0.eContents().get(0);
		private final Group cGroup_14_1 = (Group)cGroup_14.eContents().get(1);
		private final Keyword cCommaKeyword_14_1_0 = (Keyword)cGroup_14_1.eContents().get(0);
		private final Assignment cNotationAssignment_14_1_1 = (Assignment)cGroup_14_1.eContents().get(1);
		private final RuleCall cNotationNotationParserRuleCall_14_1_1_0 = (RuleCall)cNotationAssignment_14_1_1.eContents().get(0);
		
		//Note:
		//	{Note}
		//	'note' name=NoteName ':' ('type' type=NoteType)? ('duration' duration=EInt)? ('octave' octave=EInt)? ('voice'
		//	voice=EInt)? ('dynamic' dynamic=EString)? ('accidental' accidental=AccidentalType)? ('lyrics' lyrics=EString)?
		//	fermata?='fermata'?
		//	dot?='dot'?
		//	chord?='chord'? (notation+=Notation ("," notation+=Notation)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Note} 'note' name=NoteName ':' ('type' type=NoteType)? ('duration' duration=EInt)? ('octave' octave=EInt)? ('voice'
		//voice=EInt)? ('dynamic' dynamic=EString)? ('accidental' accidental=AccidentalType)? ('lyrics' lyrics=EString)?
		//fermata?='fermata'? dot?='dot'? chord?='chord'? (notation+=Notation ("," notation+=Notation)*)?
		public Group getGroup() { return cGroup; }
		
		//{Note}
		public Action getNoteAction_0() { return cNoteAction_0; }
		
		//'note'
		public Keyword getNoteKeyword_1() { return cNoteKeyword_1; }
		
		//name=NoteName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NoteName
		public RuleCall getNameNoteNameEnumRuleCall_2_0() { return cNameNoteNameEnumRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//('type' type=NoteType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'type'
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }
		
		//type=NoteType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//NoteType
		public RuleCall getTypeNoteTypeEnumRuleCall_4_1_0() { return cTypeNoteTypeEnumRuleCall_4_1_0; }
		
		//('duration' duration=EInt)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'duration'
		public Keyword getDurationKeyword_5_0() { return cDurationKeyword_5_0; }
		
		//duration=EInt
		public Assignment getDurationAssignment_5_1() { return cDurationAssignment_5_1; }
		
		//EInt
		public RuleCall getDurationEIntParserRuleCall_5_1_0() { return cDurationEIntParserRuleCall_5_1_0; }
		
		//('octave' octave=EInt)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'octave'
		public Keyword getOctaveKeyword_6_0() { return cOctaveKeyword_6_0; }
		
		//octave=EInt
		public Assignment getOctaveAssignment_6_1() { return cOctaveAssignment_6_1; }
		
		//EInt
		public RuleCall getOctaveEIntParserRuleCall_6_1_0() { return cOctaveEIntParserRuleCall_6_1_0; }
		
		//('voice' voice=EInt)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'voice'
		public Keyword getVoiceKeyword_7_0() { return cVoiceKeyword_7_0; }
		
		//voice=EInt
		public Assignment getVoiceAssignment_7_1() { return cVoiceAssignment_7_1; }
		
		//EInt
		public RuleCall getVoiceEIntParserRuleCall_7_1_0() { return cVoiceEIntParserRuleCall_7_1_0; }
		
		//('dynamic' dynamic=EString)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'dynamic'
		public Keyword getDynamicKeyword_8_0() { return cDynamicKeyword_8_0; }
		
		//dynamic=EString
		public Assignment getDynamicAssignment_8_1() { return cDynamicAssignment_8_1; }
		
		//EString
		public RuleCall getDynamicEStringParserRuleCall_8_1_0() { return cDynamicEStringParserRuleCall_8_1_0; }
		
		//('accidental' accidental=AccidentalType)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'accidental'
		public Keyword getAccidentalKeyword_9_0() { return cAccidentalKeyword_9_0; }
		
		//accidental=AccidentalType
		public Assignment getAccidentalAssignment_9_1() { return cAccidentalAssignment_9_1; }
		
		//AccidentalType
		public RuleCall getAccidentalAccidentalTypeEnumRuleCall_9_1_0() { return cAccidentalAccidentalTypeEnumRuleCall_9_1_0; }
		
		//('lyrics' lyrics=EString)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'lyrics'
		public Keyword getLyricsKeyword_10_0() { return cLyricsKeyword_10_0; }
		
		//lyrics=EString
		public Assignment getLyricsAssignment_10_1() { return cLyricsAssignment_10_1; }
		
		//EString
		public RuleCall getLyricsEStringParserRuleCall_10_1_0() { return cLyricsEStringParserRuleCall_10_1_0; }
		
		//fermata?='fermata'?
		public Assignment getFermataAssignment_11() { return cFermataAssignment_11; }
		
		//'fermata'
		public Keyword getFermataFermataKeyword_11_0() { return cFermataFermataKeyword_11_0; }
		
		//dot?='dot'?
		public Assignment getDotAssignment_12() { return cDotAssignment_12; }
		
		//'dot'
		public Keyword getDotDotKeyword_12_0() { return cDotDotKeyword_12_0; }
		
		//chord?='chord'?
		public Assignment getChordAssignment_13() { return cChordAssignment_13; }
		
		//'chord'
		public Keyword getChordChordKeyword_13_0() { return cChordChordKeyword_13_0; }
		
		//(notation+=Notation ("," notation+=Notation)*)?
		public Group getGroup_14() { return cGroup_14; }
		
		//notation+=Notation
		public Assignment getNotationAssignment_14_0() { return cNotationAssignment_14_0; }
		
		//Notation
		public RuleCall getNotationNotationParserRuleCall_14_0_0() { return cNotationNotationParserRuleCall_14_0_0; }
		
		//("," notation+=Notation)*
		public Group getGroup_14_1() { return cGroup_14_1; }
		
		//","
		public Keyword getCommaKeyword_14_1_0() { return cCommaKeyword_14_1_0; }
		
		//notation+=Notation
		public Assignment getNotationAssignment_14_1_1() { return cNotationAssignment_14_1_1; }
		
		//Notation
		public RuleCall getNotationNotationParserRuleCall_14_1_1_0() { return cNotationNotationParserRuleCall_14_1_1_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class NotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.Notation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cArticulationKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArticulationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArticulationArticulationTypeEnumRuleCall_2_1_0 = (RuleCall)cArticulationAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOrnamentKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOrnamentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOrnamentOrnamentTypeEnumRuleCall_3_1_0 = (RuleCall)cOrnamentAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSlurKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSlurAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSlurSlurTypeEnumRuleCall_4_1_0 = (RuleCall)cSlurAssignment_4_1.eContents().get(0);
		
		//Notation:
		//	{Notation}
		//	'notation:' ('articulation' articulation=ArticulationType)? ('ornament' ornament=OrnamentType)? ('slur'
		//	slur=SlurType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Notation} 'notation:' ('articulation' articulation=ArticulationType)? ('ornament' ornament=OrnamentType)? ('slur'
		//slur=SlurType)?
		public Group getGroup() { return cGroup; }
		
		//{Notation}
		public Action getNotationAction_0() { return cNotationAction_0; }
		
		//'notation:'
		public Keyword getNotationKeyword_1() { return cNotationKeyword_1; }
		
		//('articulation' articulation=ArticulationType)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'articulation'
		public Keyword getArticulationKeyword_2_0() { return cArticulationKeyword_2_0; }
		
		//articulation=ArticulationType
		public Assignment getArticulationAssignment_2_1() { return cArticulationAssignment_2_1; }
		
		//ArticulationType
		public RuleCall getArticulationArticulationTypeEnumRuleCall_2_1_0() { return cArticulationArticulationTypeEnumRuleCall_2_1_0; }
		
		//('ornament' ornament=OrnamentType)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'ornament'
		public Keyword getOrnamentKeyword_3_0() { return cOrnamentKeyword_3_0; }
		
		//ornament=OrnamentType
		public Assignment getOrnamentAssignment_3_1() { return cOrnamentAssignment_3_1; }
		
		//OrnamentType
		public RuleCall getOrnamentOrnamentTypeEnumRuleCall_3_1_0() { return cOrnamentOrnamentTypeEnumRuleCall_3_1_0; }
		
		//('slur' slur=SlurType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'slur'
		public Keyword getSlurKeyword_4_0() { return cSlurKeyword_4_0; }
		
		//slur=SlurType
		public Assignment getSlurAssignment_4_1() { return cSlurAssignment_4_1; }
		
		//SlurType
		public RuleCall getSlurSlurTypeEnumRuleCall_4_1_0() { return cSlurSlurTypeEnumRuleCall_4_1_0; }
	}
	
	public class ClefTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.ClefType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cViolinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cViolinViolinKeyword_0_0 = (Keyword)cViolinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBassEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBassBassKeyword_1_0 = (Keyword)cBassEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ClefType:
		//	violin | bass;
		public EnumRule getRule() { return rule; }
		
		//violin | bass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//violin
		public EnumLiteralDeclaration getViolinEnumLiteralDeclaration_0() { return cViolinEnumLiteralDeclaration_0; }
		
		//'violin'
		public Keyword getViolinViolinKeyword_0_0() { return cViolinViolinKeyword_0_0; }
		
		//bass
		public EnumLiteralDeclaration getBassEnumLiteralDeclaration_1() { return cBassEnumLiteralDeclaration_1; }
		
		//'bass'
		public Keyword getBassBassKeyword_1_0() { return cBassBassKeyword_1_0; }
	}
	public class RestTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.RestType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWholeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWholeWholeKeyword_0_0 = (Keyword)cWholeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHalfEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHalfHalfKeyword_1_0 = (Keyword)cHalfEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cQuarterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cQuarterQuarterKeyword_2_0 = (Keyword)cQuarterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEighthEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEighthEighthKeyword_3_0 = (Keyword)cEighthEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSixteenthEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSixteenthSixteenthKeyword_4_0 = (Keyword)cSixteenthEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cThirtysecondEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cThirtysecondThirtysecondKeyword_5_0 = (Keyword)cThirtysecondEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSixtyfourthEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSixtyfourthSixtyfourthKeyword_6_0 = (Keyword)cSixtyfourthEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum RestType:
		//	whole | half | quarter | eighth | sixteenth | thirtysecond | sixtyfourth;
		public EnumRule getRule() { return rule; }
		
		//whole | half | quarter | eighth | sixteenth | thirtysecond | sixtyfourth
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//whole
		public EnumLiteralDeclaration getWholeEnumLiteralDeclaration_0() { return cWholeEnumLiteralDeclaration_0; }
		
		//'whole'
		public Keyword getWholeWholeKeyword_0_0() { return cWholeWholeKeyword_0_0; }
		
		//half
		public EnumLiteralDeclaration getHalfEnumLiteralDeclaration_1() { return cHalfEnumLiteralDeclaration_1; }
		
		//'half'
		public Keyword getHalfHalfKeyword_1_0() { return cHalfHalfKeyword_1_0; }
		
		//quarter
		public EnumLiteralDeclaration getQuarterEnumLiteralDeclaration_2() { return cQuarterEnumLiteralDeclaration_2; }
		
		//'quarter'
		public Keyword getQuarterQuarterKeyword_2_0() { return cQuarterQuarterKeyword_2_0; }
		
		//eighth
		public EnumLiteralDeclaration getEighthEnumLiteralDeclaration_3() { return cEighthEnumLiteralDeclaration_3; }
		
		//'eighth'
		public Keyword getEighthEighthKeyword_3_0() { return cEighthEighthKeyword_3_0; }
		
		//sixteenth
		public EnumLiteralDeclaration getSixteenthEnumLiteralDeclaration_4() { return cSixteenthEnumLiteralDeclaration_4; }
		
		//'sixteenth'
		public Keyword getSixteenthSixteenthKeyword_4_0() { return cSixteenthSixteenthKeyword_4_0; }
		
		//thirtysecond
		public EnumLiteralDeclaration getThirtysecondEnumLiteralDeclaration_5() { return cThirtysecondEnumLiteralDeclaration_5; }
		
		//'thirtysecond'
		public Keyword getThirtysecondThirtysecondKeyword_5_0() { return cThirtysecondThirtysecondKeyword_5_0; }
		
		//sixtyfourth
		public EnumLiteralDeclaration getSixtyfourthEnumLiteralDeclaration_6() { return cSixtyfourthEnumLiteralDeclaration_6; }
		
		//'sixtyfourth'
		public Keyword getSixtyfourthSixtyfourthKeyword_6_0() { return cSixtyfourthSixtyfourthKeyword_6_0; }
	}
	public class RepetitionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.RepetitionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLeftKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRightRightKeyword_1_0 = (Keyword)cRightEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RepetitionType:
		//	left | right;
		public EnumRule getRule() { return rule; }
		
		//left | right
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }
		
		//'left'
		public Keyword getLeftLeftKeyword_0_0() { return cLeftLeftKeyword_0_0; }
		
		//right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_1() { return cRightEnumLiteralDeclaration_1; }
		
		//'right'
		public Keyword getRightRightKeyword_1_0() { return cRightRightKeyword_1_0; }
	}
	public class NoteNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.NoteName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCCKeyword_0_0 = (Keyword)cCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDDKeyword_1_0 = (Keyword)cDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEEKeyword_2_0 = (Keyword)cEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFFKeyword_3_0 = (Keyword)cFEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGGKeyword_4_0 = (Keyword)cGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAAKeyword_5_0 = (Keyword)cAEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBBKeyword_6_0 = (Keyword)cBEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum NoteName:
		//	C | D | E | F | G | A | B;
		public EnumRule getRule() { return rule; }
		
		//C | D | E | F | G | A | B
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//C
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_0() { return cCEnumLiteralDeclaration_0; }
		
		//'C'
		public Keyword getCCKeyword_0_0() { return cCCKeyword_0_0; }
		
		//D
		public EnumLiteralDeclaration getDEnumLiteralDeclaration_1() { return cDEnumLiteralDeclaration_1; }
		
		//'D'
		public Keyword getDDKeyword_1_0() { return cDDKeyword_1_0; }
		
		//E
		public EnumLiteralDeclaration getEEnumLiteralDeclaration_2() { return cEEnumLiteralDeclaration_2; }
		
		//'E'
		public Keyword getEEKeyword_2_0() { return cEEKeyword_2_0; }
		
		//F
		public EnumLiteralDeclaration getFEnumLiteralDeclaration_3() { return cFEnumLiteralDeclaration_3; }
		
		//'F'
		public Keyword getFFKeyword_3_0() { return cFFKeyword_3_0; }
		
		//G
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_4() { return cGEnumLiteralDeclaration_4; }
		
		//'G'
		public Keyword getGGKeyword_4_0() { return cGGKeyword_4_0; }
		
		//A
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_5() { return cAEnumLiteralDeclaration_5; }
		
		//'A'
		public Keyword getAAKeyword_5_0() { return cAAKeyword_5_0; }
		
		//B
		public EnumLiteralDeclaration getBEnumLiteralDeclaration_6() { return cBEnumLiteralDeclaration_6; }
		
		//'B'
		public Keyword getBBKeyword_6_0() { return cBBKeyword_6_0; }
	}
	public class NoteTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.NoteType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWholeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWholeWholeKeyword_0_0 = (Keyword)cWholeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHalfEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHalfHalfKeyword_1_0 = (Keyword)cHalfEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cQuarterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cQuarterQuarterKeyword_2_0 = (Keyword)cQuarterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEighthEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEighthEighthKeyword_3_0 = (Keyword)cEighthEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSixteenthEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSixteenthSixteenthKeyword_4_0 = (Keyword)cSixteenthEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cThirtysecondEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cThirtysecondThirtysecondKeyword_5_0 = (Keyword)cThirtysecondEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSixtyfourthEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSixtyfourthSixtyfourthKeyword_6_0 = (Keyword)cSixtyfourthEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum NoteType:
		//	whole | half | quarter | eighth | sixteenth | thirtysecond | sixtyfourth;
		public EnumRule getRule() { return rule; }
		
		//whole | half | quarter | eighth | sixteenth | thirtysecond | sixtyfourth
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//whole
		public EnumLiteralDeclaration getWholeEnumLiteralDeclaration_0() { return cWholeEnumLiteralDeclaration_0; }
		
		//'whole'
		public Keyword getWholeWholeKeyword_0_0() { return cWholeWholeKeyword_0_0; }
		
		//half
		public EnumLiteralDeclaration getHalfEnumLiteralDeclaration_1() { return cHalfEnumLiteralDeclaration_1; }
		
		//'half'
		public Keyword getHalfHalfKeyword_1_0() { return cHalfHalfKeyword_1_0; }
		
		//quarter
		public EnumLiteralDeclaration getQuarterEnumLiteralDeclaration_2() { return cQuarterEnumLiteralDeclaration_2; }
		
		//'quarter'
		public Keyword getQuarterQuarterKeyword_2_0() { return cQuarterQuarterKeyword_2_0; }
		
		//eighth
		public EnumLiteralDeclaration getEighthEnumLiteralDeclaration_3() { return cEighthEnumLiteralDeclaration_3; }
		
		//'eighth'
		public Keyword getEighthEighthKeyword_3_0() { return cEighthEighthKeyword_3_0; }
		
		//sixteenth
		public EnumLiteralDeclaration getSixteenthEnumLiteralDeclaration_4() { return cSixteenthEnumLiteralDeclaration_4; }
		
		//'sixteenth'
		public Keyword getSixteenthSixteenthKeyword_4_0() { return cSixteenthSixteenthKeyword_4_0; }
		
		//thirtysecond
		public EnumLiteralDeclaration getThirtysecondEnumLiteralDeclaration_5() { return cThirtysecondEnumLiteralDeclaration_5; }
		
		//'thirtysecond'
		public Keyword getThirtysecondThirtysecondKeyword_5_0() { return cThirtysecondThirtysecondKeyword_5_0; }
		
		//sixtyfourth
		public EnumLiteralDeclaration getSixtyfourthEnumLiteralDeclaration_6() { return cSixtyfourthEnumLiteralDeclaration_6; }
		
		//'sixtyfourth'
		public Keyword getSixtyfourthSixtyfourthKeyword_6_0() { return cSixtyfourthSixtyfourthKeyword_6_0; }
	}
	public class AccidentalTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.AccidentalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSharpEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSharpSharpKeyword_0_0 = (Keyword)cSharpEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFlatEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFlatFlatKeyword_1_0 = (Keyword)cFlatEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNaturalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNaturalNaturalKeyword_2_0 = (Keyword)cNaturalEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AccidentalType:
		//	sharp | flat | natural;
		public EnumRule getRule() { return rule; }
		
		//sharp | flat | natural
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sharp
		public EnumLiteralDeclaration getSharpEnumLiteralDeclaration_0() { return cSharpEnumLiteralDeclaration_0; }
		
		//'sharp'
		public Keyword getSharpSharpKeyword_0_0() { return cSharpSharpKeyword_0_0; }
		
		//flat
		public EnumLiteralDeclaration getFlatEnumLiteralDeclaration_1() { return cFlatEnumLiteralDeclaration_1; }
		
		//'flat'
		public Keyword getFlatFlatKeyword_1_0() { return cFlatFlatKeyword_1_0; }
		
		//natural
		public EnumLiteralDeclaration getNaturalEnumLiteralDeclaration_2() { return cNaturalEnumLiteralDeclaration_2; }
		
		//'natural'
		public Keyword getNaturalNaturalKeyword_2_0() { return cNaturalNaturalKeyword_2_0; }
	}
	public class SlurTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.SlurType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartStartKeyword_0_0 = (Keyword)cStartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStopEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStopStopKeyword_1_0 = (Keyword)cStopEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SlurType:
		//	start | stop;
		public EnumRule getRule() { return rule; }
		
		//start | stop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_0() { return cStartEnumLiteralDeclaration_0; }
		
		//'start'
		public Keyword getStartStartKeyword_0_0() { return cStartStartKeyword_0_0; }
		
		//stop
		public EnumLiteralDeclaration getStopEnumLiteralDeclaration_1() { return cStopEnumLiteralDeclaration_1; }
		
		//'stop'
		public Keyword getStopStopKeyword_1_0() { return cStopStopKeyword_1_0; }
	}
	public class ArticulationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.ArticulationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDetachedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDetachedDetachedKeyword_0_0 = (Keyword)cDetachedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLegatoEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLegatoLegatoKeyword_1_0 = (Keyword)cLegatoEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStaccatoEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStaccatoStaccatoKeyword_2_0 = (Keyword)cStaccatoEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPortatoEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPortatoPortatoKeyword_3_0 = (Keyword)cPortatoEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTenutoEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTenutoTenutoKeyword_4_0 = (Keyword)cTenutoEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMarcatoEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMarcatoMarcatoKeyword_5_0 = (Keyword)cMarcatoEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ArticulationType:
		//	detached | legato | staccato | portato | tenuto | marcato;
		public EnumRule getRule() { return rule; }
		
		//detached | legato | staccato | portato | tenuto | marcato
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//detached
		public EnumLiteralDeclaration getDetachedEnumLiteralDeclaration_0() { return cDetachedEnumLiteralDeclaration_0; }
		
		//'detached'
		public Keyword getDetachedDetachedKeyword_0_0() { return cDetachedDetachedKeyword_0_0; }
		
		//legato
		public EnumLiteralDeclaration getLegatoEnumLiteralDeclaration_1() { return cLegatoEnumLiteralDeclaration_1; }
		
		//'legato'
		public Keyword getLegatoLegatoKeyword_1_0() { return cLegatoLegatoKeyword_1_0; }
		
		//staccato
		public EnumLiteralDeclaration getStaccatoEnumLiteralDeclaration_2() { return cStaccatoEnumLiteralDeclaration_2; }
		
		//'staccato'
		public Keyword getStaccatoStaccatoKeyword_2_0() { return cStaccatoStaccatoKeyword_2_0; }
		
		//portato
		public EnumLiteralDeclaration getPortatoEnumLiteralDeclaration_3() { return cPortatoEnumLiteralDeclaration_3; }
		
		//'portato'
		public Keyword getPortatoPortatoKeyword_3_0() { return cPortatoPortatoKeyword_3_0; }
		
		//tenuto
		public EnumLiteralDeclaration getTenutoEnumLiteralDeclaration_4() { return cTenutoEnumLiteralDeclaration_4; }
		
		//'tenuto'
		public Keyword getTenutoTenutoKeyword_4_0() { return cTenutoTenutoKeyword_4_0; }
		
		//marcato
		public EnumLiteralDeclaration getMarcatoEnumLiteralDeclaration_5() { return cMarcatoEnumLiteralDeclaration_5; }
		
		//'marcato'
		public Keyword getMarcatoMarcatoKeyword_5_0() { return cMarcatoMarcatoKeyword_5_0; }
	}
	public class OrnamentTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MusicDsl.OrnamentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSlideEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSlideSlideKeyword_0_0 = (Keyword)cSlideEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGlissandoEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGlissandoGlissandoKeyword_1_0 = (Keyword)cGlissandoEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAciaccaturaEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAciaccaturaAciaccaturaKeyword_2_0 = (Keyword)cAciaccaturaEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAppoggiaturaEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAppoggiaturaAppoggiaturaKeyword_3_0 = (Keyword)cAppoggiaturaEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTurnEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTurnTurnKeyword_4_0 = (Keyword)cTurnEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMordentEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMordentMordentKeyword_5_0 = (Keyword)cMordentEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTrillEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTrillTrillKeyword_6_0 = (Keyword)cTrillEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum OrnamentType:
		//	slide | glissando | aciaccatura | appoggiatura | turn | mordent | trill;
		public EnumRule getRule() { return rule; }
		
		//slide | glissando | aciaccatura | appoggiatura | turn | mordent | trill
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//slide
		public EnumLiteralDeclaration getSlideEnumLiteralDeclaration_0() { return cSlideEnumLiteralDeclaration_0; }
		
		//'slide'
		public Keyword getSlideSlideKeyword_0_0() { return cSlideSlideKeyword_0_0; }
		
		//glissando
		public EnumLiteralDeclaration getGlissandoEnumLiteralDeclaration_1() { return cGlissandoEnumLiteralDeclaration_1; }
		
		//'glissando'
		public Keyword getGlissandoGlissandoKeyword_1_0() { return cGlissandoGlissandoKeyword_1_0; }
		
		//aciaccatura
		public EnumLiteralDeclaration getAciaccaturaEnumLiteralDeclaration_2() { return cAciaccaturaEnumLiteralDeclaration_2; }
		
		//'aciaccatura'
		public Keyword getAciaccaturaAciaccaturaKeyword_2_0() { return cAciaccaturaAciaccaturaKeyword_2_0; }
		
		//appoggiatura
		public EnumLiteralDeclaration getAppoggiaturaEnumLiteralDeclaration_3() { return cAppoggiaturaEnumLiteralDeclaration_3; }
		
		//'appoggiatura'
		public Keyword getAppoggiaturaAppoggiaturaKeyword_3_0() { return cAppoggiaturaAppoggiaturaKeyword_3_0; }
		
		//turn
		public EnumLiteralDeclaration getTurnEnumLiteralDeclaration_4() { return cTurnEnumLiteralDeclaration_4; }
		
		//'turn'
		public Keyword getTurnTurnKeyword_4_0() { return cTurnTurnKeyword_4_0; }
		
		//mordent
		public EnumLiteralDeclaration getMordentEnumLiteralDeclaration_5() { return cMordentEnumLiteralDeclaration_5; }
		
		//'mordent'
		public Keyword getMordentMordentKeyword_5_0() { return cMordentMordentKeyword_5_0; }
		
		//trill
		public EnumLiteralDeclaration getTrillEnumLiteralDeclaration_6() { return cTrillEnumLiteralDeclaration_6; }
		
		//'trill'
		public Keyword getTrillTrillKeyword_6_0() { return cTrillTrillKeyword_6_0; }
	}
	
	private final CompositionElements pComposition;
	private final StaffElementElements pStaffElement;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final StaffElements pStaff;
	private final ClefElements pClef;
	private final TimeSignatureElements pTimeSignature;
	private final KeyElements pKey;
	private final ClefTypeElements eClefType;
	private final MeasureElements pMeasure;
	private final RestElements pRest;
	private final RepetitionElements pRepetition;
	private final NoteElements pNote;
	private final RestTypeElements eRestType;
	private final RepetitionTypeElements eRepetitionType;
	private final NoteNameElements eNoteName;
	private final NoteTypeElements eNoteType;
	private final EBooleanElements pEBoolean;
	private final AccidentalTypeElements eAccidentalType;
	private final NotationElements pNotation;
	private final SlurTypeElements eSlurType;
	private final ArticulationTypeElements eArticulationType;
	private final OrnamentTypeElements eOrnamentType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MusicDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pComposition = new CompositionElements();
		this.pStaffElement = new StaffElementElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pStaff = new StaffElements();
		this.pClef = new ClefElements();
		this.pTimeSignature = new TimeSignatureElements();
		this.pKey = new KeyElements();
		this.eClefType = new ClefTypeElements();
		this.pMeasure = new MeasureElements();
		this.pRest = new RestElements();
		this.pRepetition = new RepetitionElements();
		this.pNote = new NoteElements();
		this.eRestType = new RestTypeElements();
		this.eRepetitionType = new RepetitionTypeElements();
		this.eNoteName = new NoteNameElements();
		this.eNoteType = new NoteTypeElements();
		this.pEBoolean = new EBooleanElements();
		this.eAccidentalType = new AccidentalTypeElements();
		this.pNotation = new NotationElements();
		this.eSlurType = new SlurTypeElements();
		this.eArticulationType = new ArticulationTypeElements();
		this.eOrnamentType = new OrnamentTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MusicDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Composition:
	//	{Composition}
	//	'Composition' name=EString
	//	'[' ('author:' author=EString)? ('instrument:' instrument=EString)? ('tonality:' tonality=EString)? ('soundTempo:'
	//	soundTempo=EInt)?
	//	staff+=Staff ("," staff+=Staff)*
	//	']';
	public CompositionElements getCompositionAccess() {
		return pComposition;
	}
	
	public ParserRule getCompositionRule() {
		return getCompositionAccess().getRule();
	}
	
	//StaffElement:
	//	Measure | Rest | Repetition | Note;
	public StaffElementElements getStaffElementAccess() {
		return pStaffElement;
	}
	
	public ParserRule getStaffElementRule() {
		return getStaffElementAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Staff:
	//	{Staff}
	//	'Staff' staffNumber=EInt
	//	'['
	//	'clef:' clef=Clef ('key:' key=Key)?
	//	'time:' time=TimeSignature (elements+=StaffElement ("," elements+=StaffElement)*)?
	//	']';
	public StaffElements getStaffAccess() {
		return pStaff;
	}
	
	public ParserRule getStaffRule() {
		return getStaffAccess().getRule();
	}
	
	//Clef:
	//	{Clef} type=ClefType?;
	public ClefElements getClefAccess() {
		return pClef;
	}
	
	public ParserRule getClefRule() {
		return getClefAccess().getRule();
	}
	
	//TimeSignature:
	//	'beat' beat=EInt ',' 'beatType' beatType=EInt;
	public TimeSignatureElements getTimeSignatureAccess() {
		return pTimeSignature;
	}
	
	public ParserRule getTimeSignatureRule() {
		return getTimeSignatureAccess().getRule();
	}
	
	//Key:
	//	fifths=EInt;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//enum ClefType:
	//	violin | bass;
	public ClefTypeElements getClefTypeAccess() {
		return eClefType;
	}
	
	public EnumRule getClefTypeRule() {
		return getClefTypeAccess().getRule();
	}
	
	//Measure:
	//	{Measure}
	//	'Measure' measureNumber=EInt
	//	'begin' (repetition+=Repetition ("," repetition+=Repetition)*)? (rest+=Rest ("," rest+=Rest)*)? (note+=Note (","
	//	note+=Note)*)?
	//	'end';
	public MeasureElements getMeasureAccess() {
		return pMeasure;
	}
	
	public ParserRule getMeasureRule() {
		return getMeasureAccess().getRule();
	}
	
	//Rest:
	//	{Rest}
	//	'rest'
	//	type=RestType?;
	public RestElements getRestAccess() {
		return pRest;
	}
	
	public ParserRule getRestRule() {
		return getRestAccess().getRule();
	}
	
	//Repetition:
	//	{Repetition}
	//	'repetition'
	//	type=RepetitionType?;
	public RepetitionElements getRepetitionAccess() {
		return pRepetition;
	}
	
	public ParserRule getRepetitionRule() {
		return getRepetitionAccess().getRule();
	}
	
	//Note:
	//	{Note}
	//	'note' name=NoteName ':' ('type' type=NoteType)? ('duration' duration=EInt)? ('octave' octave=EInt)? ('voice'
	//	voice=EInt)? ('dynamic' dynamic=EString)? ('accidental' accidental=AccidentalType)? ('lyrics' lyrics=EString)?
	//	fermata?='fermata'?
	//	dot?='dot'?
	//	chord?='chord'? (notation+=Notation ("," notation+=Notation)*)?;
	public NoteElements getNoteAccess() {
		return pNote;
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}
	
	//enum RestType:
	//	whole | half | quarter | eighth | sixteenth | thirtysecond | sixtyfourth;
	public RestTypeElements getRestTypeAccess() {
		return eRestType;
	}
	
	public EnumRule getRestTypeRule() {
		return getRestTypeAccess().getRule();
	}
	
	//enum RepetitionType:
	//	left | right;
	public RepetitionTypeElements getRepetitionTypeAccess() {
		return eRepetitionType;
	}
	
	public EnumRule getRepetitionTypeRule() {
		return getRepetitionTypeAccess().getRule();
	}
	
	//enum NoteName:
	//	C | D | E | F | G | A | B;
	public NoteNameElements getNoteNameAccess() {
		return eNoteName;
	}
	
	public EnumRule getNoteNameRule() {
		return getNoteNameAccess().getRule();
	}
	
	//enum NoteType:
	//	whole | half | quarter | eighth | sixteenth | thirtysecond | sixtyfourth;
	public NoteTypeElements getNoteTypeAccess() {
		return eNoteType;
	}
	
	public EnumRule getNoteTypeRule() {
		return getNoteTypeAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//enum AccidentalType:
	//	sharp | flat | natural;
	public AccidentalTypeElements getAccidentalTypeAccess() {
		return eAccidentalType;
	}
	
	public EnumRule getAccidentalTypeRule() {
		return getAccidentalTypeAccess().getRule();
	}
	
	//Notation:
	//	{Notation}
	//	'notation:' ('articulation' articulation=ArticulationType)? ('ornament' ornament=OrnamentType)? ('slur'
	//	slur=SlurType)?;
	public NotationElements getNotationAccess() {
		return pNotation;
	}
	
	public ParserRule getNotationRule() {
		return getNotationAccess().getRule();
	}
	
	//enum SlurType:
	//	start | stop;
	public SlurTypeElements getSlurTypeAccess() {
		return eSlurType;
	}
	
	public EnumRule getSlurTypeRule() {
		return getSlurTypeAccess().getRule();
	}
	
	//enum ArticulationType:
	//	detached | legato | staccato | portato | tenuto | marcato;
	public ArticulationTypeElements getArticulationTypeAccess() {
		return eArticulationType;
	}
	
	public EnumRule getArticulationTypeRule() {
		return getArticulationTypeAccess().getRule();
	}
	
	//enum OrnamentType:
	//	slide | glissando | aciaccatura | appoggiatura | turn | mordent | trill;
	public OrnamentTypeElements getOrnamentTypeAccess() {
		return eOrnamentType;
	}
	
	public EnumRule getOrnamentTypeRule() {
		return getOrnamentTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
